import Perf.DuperInterface

-- Standard Preprocessing Configs
set_option auto.redMode "reducible"
-- Standard Native Configs
set_option auto.native.solver.func "Auto.duperRaw"

set_option auto.native true
-- Manual Check

section ManualCheck

  example : True := by (fail_if_success auto üëç); auto
  private def sorryChk : False := by auto üëé
  #print axioms sorryChk

  set_option auto.lamReif.prep.def false

  example (h‚ÇÅ : False) (h‚ÇÇ : a = b) : False := by auto [h‚ÇÅ, h‚ÇÇ]

  example (h‚ÇÅ : False) (h‚ÇÇ : a = b) : False := by auto [h‚ÇÅ, h‚ÇÇ]

  example (h‚ÇÅ : a = b) (h‚ÇÇ : b = c) (h‚ÇÉ : c = d) : a = c := by
    auto [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

  example (h‚ÇÅ : a = b) (h‚ÇÇ : b = c) (h‚ÇÉ : c = d) : a = c := by
    auto [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

end ManualCheck

#eval dbg_trace s!"Inhabitation"; 0
-- Inhabitation Reasoning
section Inhabitation

  example [Inhabited Œ±] (h : ‚àÄ (x : Œ±), True) : ‚àÉ (x : Œ±), True := by
    auto

  example [Nonempty Œ±] (h : ‚àÄ (x : Œ±), True) : ‚àÉ (x : Œ±), True := by
    auto

  example (h : ‚àÄ (x : Nat), x = x) : ‚àÉ (x : Nat), x = x := by
    auto

  example (x : Œ±) (y : Œ≤) (h : ‚àÄ (x : Œ±) (y : Œ≤), x = x ‚àß y = y) :
     ‚àÉ (x : Œ±) (y : Œ≤), x = x ‚àß y = y := by
    auto

  example (a : Œ±) (p : Œ± ‚Üí Prop) : (‚àÉ x, p x ‚Üí r) ‚Üî ((‚àÄ x, p x) ‚Üí r) := by
    auto

  example (a : Œ±) (p : Œ± ‚Üí Prop) : (‚àÉ x, r ‚Üí p x) ‚Üî (r ‚Üí ‚àÉ x, p x) := by
    auto

  -- `OK Nat ‚Üí OK Nat` should be blocked for being trivial
  example (OK : Type ‚Üí Type)
    (inh : ‚àÄ (Œ± : Type), OK Œ± ‚Üí OK Œ±)
    (h : ‚àÄ (x : OK Nat), x = x) : 1 = 1 := by
    auto

  -- Either `inh‚ÇÅ` or `inh‚ÇÇ` should be blocked for being redundant
  example (OK‚ÇÅ OK‚ÇÇ : Type ‚Üí Type)
    (inh‚ÇÅ : ‚àÄ (Œ± : Type), OK‚ÇÅ Œ± ‚Üí OK‚ÇÇ Œ±)
    (inh‚ÇÇ : ‚àÄ (Œ± : Type), OK‚ÇÅ Œ± ‚Üí OK‚ÇÅ Œ± ‚Üí OK‚ÇÇ Œ±)
    (h : OK‚ÇÅ Nat ‚Üí ‚àÄ (x : OK‚ÇÇ Nat), x = x) : 1 = 1 := by
    auto

end Inhabitation

-- Monomorphization

set_option auto.redMode "instances" in
example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  intromono [List.append_assoc, List.map_append];
  apply monoLem_0
  rw [monoLem_1]; rw [monoLem_3]; rw [monoLem_3]

example
  (h : ‚àÄ (Œ± : Type u) (as bs cs : List Œ±), (as ++ bs) ++ cs ‚â† as ++ (bs ++ cs) ‚Üí False)
  {Œ± : Type u} (as bs cs : List Œ±) : (as ++ bs) ++ cs = as ++ (bs ++ cs) := by
  auto

#eval dbg_trace s!"MonomorphizationWierdExample"; 0
section MonomorphizationWierdExample

  def List.directZip : {Œ± : Type u} ‚Üí List Œ± ‚Üí {Œ≤ : Type v} ‚Üí List Œ≤ ‚Üí List (Œ± √ó Œ≤)
    | _, [], _, []   => []
    | _, [], _, _::_ => []
    | _, _::_, _, [] => []
    | _, x::xs, _, y::ys => (x,y) :: directZip xs ys

  def prod_eq‚ÇÅ' : ‚àÄ (x : Œ±) (y : Œ≤), Prod.fst (x, y) = x := by auto
  def prod_eq‚ÇÇ' : ‚àÄ (x : Œ±) (y : Œ≤), Prod.snd (x, y) = y := by auto

  set_option auto.mono.saturationThreshold 800 in
  example
    (Œ± : Type u)
    (as bs cs ds : List Œ±)
    (hab : as.length = bs.length) (hbc : bs.length = cs.length) (hcd : cs.length = ds.length)
    (h : ‚àÄ (Œ¥ : Type u) (f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ : Œ¥ ‚Üí Œ±) (xs : List Œ¥),
      xs.map f‚ÇÅ = as ‚àß xs.map f‚ÇÇ = bs ‚àß xs.map f‚ÇÉ = cs ‚àß xs.map f‚ÇÑ = ds ‚Üí False) : False := by
    intromono [h, hab, prod_eq‚ÇÅ', prod_eq‚ÇÇ'] d[List.length, List.directZip, List.map]; sorry

end MonomorphizationWierdExample

#eval dbg_trace s!"DSRobust"; 0
-- Data Structure Robustness
section DSRobust

  -- Duplicated reified fact
  example (h‚ÇÅ : False) (h‚ÇÇ : False) : False := by auto [h‚ÇÅ, h‚ÇÇ]
  example (Œ± : Prop) (h‚ÇÅ : Œ±) (h‚ÇÇ : Œ±) (h‚ÇÉ : Œ±) : Œ± := by auto
  example (h‚ÇÅ : ¬¨ True) : True := by auto [h‚ÇÅ]

  -- Result of ChkStep coincides with input term
  example (h‚ÇÅ : False ‚Üí False) (h‚ÇÇ : False) : True := by auto [h‚ÇÅ, h‚ÇÇ]

end DSRobust

-- Tactic elaboration

example : True := by auto d[]
example : True := by auto u[]
example : True := by auto [] u[] d[]
example : True := by first | auto üëç| exact True.intro
example : True := by auto üëé

#eval dbg_trace s!"CollectLemma"; 0
-- Defeq Lemma collection
section CollectLemma

  set_option auto.redMode "instances"
  example : (‚àÄ (xs ys zs : List Œ±), xs ++ ys ++ zs = xs ++ (ys ++ zs)) := by
    intro xs; induction xs <;> auto [*] d[List.append]

end CollectLemma

#eval dbg_trace s!"Skolemization"; 0
-- Skolemization
section Skolemization

  example (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ x, p x) : ‚àÉ x, p x :=
    by auto

  example (p q : (Œ± ‚Üí Œ≤) ‚Üí Prop) (h‚ÇÅ : ‚àÉ (f : _) (g : Œ±), p f) (h‚ÇÇ : ‚àÄ f, p f ‚Üí q f) : ‚àÉ f, q f :=
    by auto

  example (p : Œ± ‚Üí Prop) (q : (Œ≤ ‚Üí Œ≥) ‚Üí Prop) (h‚ÇÅ : ‚àÉ f, p f) (h‚ÇÇ : ‚àÉ f, q f) : ‚àÉ f g, p f ‚àß q g :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Prop) (h : ‚àÄ (x : Œ±), ‚àÉ y, p x y) : ‚àÉ (f : Œ± ‚Üí Œ≤), ‚àÄ x, p x (f x) :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Prop) (h : ‚àÄ (x : Œ±) (y : Œ≤), ‚àÉ z, p x y z) :
    ‚àÉ (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥), ‚àÄ x y, p x y (f x y) :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥ ‚Üí Prop) (h : ‚àÄ (x : Œ±), ‚àÉ (y : Œ≤), ‚àÄ (z : Œ≥), ‚àÉ (t : Œ¥), p x y z t) :
    ‚àÉ (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥ ‚Üí Œ¥), ‚àÄ x z, p x (f x) z (g x z) :=
    by auto

  example (p : Œ± ‚Üí (Œ≤ ‚Üí Œ≥) ‚Üí Prop) (h : ‚àÄ x, ‚àÉ y, p x y) : ‚àÉ (f : _ ‚Üí _), ‚àÄ x, p x (f x) :=
    by auto

  example (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ (_ : Œ±), p x) (h‚ÇÇ : p x) : p x :=
    by auto

  example (p : Œ± ‚Üí Prop)
    (h‚ÇÅ : ‚àÉ (_ _ : Œ≤) (_ _ : Œ≥), p x) (h‚ÇÇ : ‚àÉ (_ _ : Œ≤), p x) : p x :=
    by auto

end Skolemization

#eval dbg_trace s!"Extensionalization"; 0
-- Extensionalization
section Extensionalization

  example (f g : Nat ‚Üí Nat) (H : ‚àÄ x, f x = g x) : f = g := by
    auto

  example (f g : (Œ± ‚Üí Œ±) ‚Üí Œ≤ ‚Üí Œ±) (H : ‚àÄ x, f x = g x) : f = g := by
    auto

  example : (fun f g => @Eq (Œ± ‚Üí Œ± ‚Üí Œ±) f g) = (fun f g => ‚àÄ x, f x = g x) :=
    by auto

end Extensionalization

-- Constant unfolding

#eval dbg_trace s!"UnfoldConst"; 0
section UnfoldConst

  def c‚ÇÅ := 2
  def c‚ÇÇ := c‚ÇÅ

  example : c‚ÇÅ = 2 := by auto u[c‚ÇÅ]
  example : c‚ÇÇ = 2 := by
    try auto u[c‚ÇÅ, c‚ÇÇ]
    auto u[c‚ÇÇ, c‚ÇÅ]
  example : c‚ÇÇ = 2 := by auto u[c‚ÇÅ] d[c‚ÇÇ]
  example : c‚ÇÇ = 2 := by auto u[c‚ÇÇ] d[c‚ÇÅ]
  example (h : c‚ÇÉ = c‚ÇÅ) : c‚ÇÉ = 2 := by auto [h] u[c‚ÇÅ]
  example : let c := 2; c = 2 := by
    try auto u[c];
    auto

  example : True := by auto d[Nat.rec]

  def not' (b : Bool) :=
    match b with
    | true => false
    | false => true

  example : ‚àÄ b, (not' b) = true ‚Üî b = false := by
    auto u[not', not'.match_1] d[Bool.rec]

end UnfoldConst

-- First Order

example : True := by
  auto [True.intro];

example (a b : Prop) : a ‚à® b ‚à® ¬¨ a := by
  auto

example (a b : Nat) (f : Nat ‚Üí Nat)
 (eqNat : Nat ‚Üí Nat ‚Üí Prop) (H : eqNat (f a) (f b)) : True := by
  auto [H]

example {Œ± Œ≤ : Type} (a : Œ±) (b : Œ≤) (H : b = b) : a = a := by
  auto [H]

example (a : Nat) (f : Nat ‚Üí Nat) (H : ‚àÄ x, f x = x) :
  f x = f (f (f (f (f (f (f (f (f x)))))))) := by
  auto [H]

example (x y : Nat) (f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá f‚Çà f‚Çâ f‚ÇÅ‚ÇÄ f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÅ‚ÇÉ f‚ÇÅ‚ÇÑ : Nat ‚Üí Nat ‚Üí Nat)
  (H : ‚àÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ x‚ÇÜ x‚Çá x‚Çà,
    f‚ÇÅ (f‚ÇÇ (f‚ÇÉ x‚ÇÅ x‚ÇÇ) (f‚ÇÑ x‚ÇÉ x‚ÇÑ)) (f‚ÇÖ (f‚ÇÜ x‚ÇÖ x‚ÇÜ) (f‚Çá x‚Çá x‚Çà)) =
    f‚Çà (f‚Çâ (f‚ÇÅ‚ÇÄ x‚Çà x‚Çá) (f‚ÇÅ‚ÇÅ x‚ÇÜ x‚ÇÖ)) (f‚ÇÅ‚ÇÇ (f‚ÇÅ‚ÇÉ x‚ÇÑ x‚ÇÉ) (f‚ÇÅ‚ÇÑ x‚ÇÇ x‚ÇÅ))) :
  True := by
  auto [H]

#eval dbg_trace s!"Basic"; 0
-- Basic examples
example (a b c d : Nat) :
  a + b + d + c = (d + a) + (c + b) := by
  auto [Nat.add_comm, Nat.add_assoc]

example (a b c : Nat) :
  a * (b + c) = b * a + a * c := by
  auto [Nat.add_comm, Nat.mul_comm, Nat.add_mul]

-- Binders in the goal

example : 2 = 3 ‚Üí 2 = 3 := by auto

#eval dbg_trace s!"HigherOrder"; 0
-- Higher Order
example (H : (fun x : Nat => x) = (fun x => x)) : True := by
  auto [H]

example (H : (fun (x y z t : Nat) => x) = (fun x y z t => x)) : True := by
  auto [H]

example
  {Œ± : Sort u}
  (add : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hadd : ‚àÄ x y f n, add x y f n = (x f) ((y f) n))
  (mul : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hmul : ‚àÄ x y f, mul x y f = x (y f))
  (w‚ÇÅ w‚ÇÇ : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hw‚ÇÅ‚ÇÇ : (w‚ÇÅ = w‚ÇÇ) = (w‚ÇÇ = w‚ÇÅ)) : True := by
  auto [Hadd, Hmul, Hw‚ÇÅ‚ÇÇ]

#eval dbg_trace s!"Polymorphic"; 0
-- Polymorphic Constant
set_option auto.redMode "instances" in
example (as bs cs ds : List Œ≤) : (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

set_option auto.redMode "instances" in
example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

example (as bs cs ds : List Œ≤) :
  (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

-- Polymorphic free variable

example
  (ap : ‚àÄ {Œ± : Type v}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
  (ap_assoc : ‚àÄ (Œ± : Type v) (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) :
  ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)) := by
  auto [ap_assoc]

example
  (hap : ‚àÄ {Œ± Œ≤ Œ≥ : Type u} [self : HAppend Œ± Œ≤ Œ≥], Œ± ‚Üí Œ≤ ‚Üí Œ≥)
  (ap_assoc : ‚àÄ (Œ± : Type u) (as bs cs : List Œ±),
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) cs =
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs cs)) :
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds) =
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds)) := by
  auto [ap_assoc]

#eval dbg_trace s!"MetaVaraible"; 0
-- Metavariable
example (u : Œ±) (h : ‚àÄ (z : Œ±), x = z ‚àß z = y) : x = y := by
  have g : ‚àÄ z, x = z ‚àß z = y ‚Üí x = y := by
    intros z hlr; have ‚ü®hl, hr‚ü© := hlr; exact Eq.trans hl hr
  -- Notably, this example fails if we use "duper"
  apply g; auto [h]; exact u

example (Œ± : Type u) : True := by
  have g : (‚àÄ (ap : ‚àÄ {Œ± : Type u}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
    (ap_assoc_imp : (‚àÄ (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) ‚Üí
      (‚àÄ (as bs cs ds : List Œ±), ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)))), True) := by
    intros; exact True.intro
  apply g;
  case ap_assoc_imp => intro hassoc; auto [hassoc]
  case ap => exact List.append

-- A head expression may have different dependent arguments under
--   different circumstances. This is first observed in `FunLike.coe`

section FluidDep

  variable (fundep : ‚àÄ {Œ± : Type u} (Œ≤ : Œ± ‚Üí Type) (a : Œ±), Œ≤ a)

  example (h : @fundep Œ± (fun _ => Nat) = fun (_ : Œ±) => x) :
    @fundep Œ± (fun _ => Nat) y = x := by
    auto [h]

end FluidDep

#eval dbg_trace s!"TypeDefeq"; 0
-- Defeq Problem in Types
section TypeDefeq

  class Foo where
    foo : Nat

  def inst‚ÇÅ : Foo := ‚ü®2‚ü©

  def inst‚ÇÇ : Foo := ‚ü®2‚ü©

  variable (fun‚ÇÅ : [Foo] ‚Üí Type)

  example (f : @fun‚ÇÅ inst‚ÇÅ ‚Üí Nat) (g : @fun‚ÇÅ inst‚ÇÇ ‚Üí Nat) (H : f = g) : g = f := by
    auto [H]

end TypeDefeq

#eval dbg_trace s!"DefinitionRecognition"; 0
-- Definition Recognition
section DefinitionRecognition

  example (a b : Œ±) (f : Œ± ‚Üí Œ±) (H : f b = a) : True := by
    auto

  example (f g : Œ± ‚Üí Œ≤) (h : Œ± ‚Üí Œ±) (H : ‚àÄ x, f x = g (h x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±) (H : ‚àÄ x y z, f x y = g x y z z) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : ‚àÄ x y, f y x = g x x) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => f x y)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => g x x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => g x x) = (fun x y => f y x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥ ‚Üí Œµ) (g : Œ± ‚Üí Œ± ‚Üí Œµ) (H : ‚àÄ x t z y, f x y z t = g x x) : True := by
    auto

  example (a b : Œ±) (f : Œ± ‚Üí Œ±) (H : f b = a) : f (f b) = f a := by
    auto

  example (a : Œ±) (f : Œ± ‚Üí Œ±) (H : f a = a) : f (f a) = a := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => g x x)) :
    f b a = f c a := by
    auto

  example (H : Œ± ‚Üî Œ≤) : Œ± = Œ≤ := by
    auto

  example {Œ± : Type} (f : Œ± ‚Üí Nat ‚Üí Nat ‚Üí Œ± ‚Üí Nat) :
    ‚àÄ a b c, f a 1 b c = f a 1 b c := by auto

end DefinitionRecognition

#eval dbg_trace s!"Adhoc"; 0
-- Ad-hoc support
section Adhoc

  -- If-then-else
  example (h‚ÇÅ : if 2 < 3 then False else True) (h‚ÇÇ : 2 < 3) : False := by
    auto

  example (h‚ÇÅ : if 2 > 3 then True else False) (h‚ÇÇ : ¬¨ 2 > 3) : False := by
    auto

  example {Œ± : Sort u} {Œ≤ : Sort v} (x y : Œ±) (z t : Œ≤) :
    (if True then x else y) = x ‚àß (if False then z else t) = t := by
    auto

  -- Boolean
  example : true ‚â† false := by
    auto

  example
    (a b : Œ±) [inst : Decidable (a = b)]
    (h : if (a = b) then True else a = b) : a = b := by
    auto

  -- Decide
  example : ‚àÄ b, !(b = false) ‚Üî b = true := by auto

  -- Nat
  example (_ : ‚àÉ b, !(!b) ‚â† b) : False := by auto

  example (a b : Nat) : max a b = max a b ‚àß min a b = min a b := by auto

  example (a b c : Nat) : Nat.zero = 0 ‚àß 3 = nat_lit 3 ‚àß (a = b ‚Üî b = a) ‚àß Nat.succ c = c + 1 := by auto

  example : Nat.succ x = x + 1 := by auto

  example (a b : Nat) : a % b + a - b + (a / b) * b = a % b + a - b + (a / b) * b := by auto

  example (a b c d : Nat) (h‚ÇÅ : a < b) (h‚ÇÇ : c > d) : b > a ‚àß d < c := by auto

  example (a b c d : Nat) (h‚ÇÅ : a ‚â§ b) (h‚ÇÇ : c ‚â• d) : b ‚â• a ‚àß d ‚â§ c := by auto

  -- Integer
  example
    (a b : Int)
    (mul_comm : ‚àÄ (a b : Int), a * b = b * a) : a * b + 1 = b * a + 1 := by auto

  example
    (a b : Int)
    : a * b - a % (Int.mod b a) = a * b - a % (Int.mod b a) := by auto

  example (a : Int)
    (h‚ÇÅ : a ‚â• 0) (h‚ÇÇ : -a ‚â§ 0) (h‚ÇÉ : 0 < 1) (h‚ÇÑ : 2 > 0)
    : (a ‚â• 0) ‚àß (-a ‚â§ 0) ‚àß (0 < 1) ‚àß (2 > 0) := by auto

  example (a b : Int) : max a b = max a b ‚àß min a b = min a b := by auto

  example : (3 : Int) = ((nat_lit 3) : Int) := by auto

  example : (-3 : Int) = (-(nat_lit 3) : Int) := by auto

  -- String
  example (a b : String)
    : "asdf" = "asdf" ‚àß a ++ b = a ++ b ‚àß (a < b) = (a < b) ‚àß
      (a > b) = (a > b) ‚àß a.length = a.length := by auto

  example (a b : String)
    : String.isPrefixOf a b = String.isPrefixOf a b ‚àß
      String.replace a b a = String.replace a b a := by auto

  -- BitVec
  example (a : Std.BitVec k) (b : Std.BitVec 2) : a = a ‚àß b = b := by auto

  example (a : Std.BitVec u) (b : Std.BitVec v) (c : Std.BitVec 2) :
    a ++ b = a ++ b ‚àß b ++ c = b ++ c := by auto

  open Std.BitVec in
  example :
    0b10#3 + 0b101#3 = 0b10#3 + 0b101#3 ‚àß
    0b10#(3+0) * 0b101#(1+2) = 0b10#3 * 0b101#3 := by auto

  open Std.BitVec in
  #check (4+5)#(3+2)

  open Std.BitVec in
  example (a b : Nat) : (a + b)#16 = a#16 + b#16 ‚àß (a * b)#16 = a#16 * b#16 := by auto

  example (a : Std.BitVec 5) (b : Std.BitVec k) :
    a.msb = a.msb ‚àß b.msb = b.msb ‚àß
    a.rotateLeft w = a.rotateLeft w ‚àß
    a.rotateRight w = a.rotateRight w := by auto

end Adhoc

#eval IO.println "Done"
